// Code generated by Stan version 2.20.0

#include <stan/model/model_header.hpp>

namespace simplest_football_regression_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "simplest_football_regression.stan");
    reader.add_event(55, 53, "end", "simplest_football_regression.stan");
    return reader;
}

class simplest_football_regression_model
  : public stan::model::model_base_crtp<simplest_football_regression_model> {
private:
        int Ng;
        int Nht;
        std::vector<int> goals;
        std::vector<int> hteam_ind;
        double alpha_mean;
        double alpha_sd;
        double phi_mean;
        double phi_sd;
        double hteam_mean;
        double hteam_sigma;
public:
    simplest_football_regression_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }

    simplest_football_regression_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "simplest_football_regression_model_namespace::simplest_football_regression_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "Ng", "int", context__.to_vec());
            Ng = int(0);
            vals_i__ = context__.vals_i("Ng");
            pos__ = 0;
            Ng = vals_i__[pos__++];
            check_greater_or_equal(function__, "Ng", Ng, 1);

            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "Nht", "int", context__.to_vec());
            Nht = int(0);
            vals_i__ = context__.vals_i("Nht");
            pos__ = 0;
            Nht = vals_i__[pos__++];
            check_greater_or_equal(function__, "Nht", Nht, 1);

            current_statement_begin__ = 6;
            validate_non_negative_index("goals", "Ng", Ng);
            context__.validate_dims("data initialization", "goals", "int", context__.to_vec(Ng));
            goals = std::vector<int>(Ng, int(0));
            vals_i__ = context__.vals_i("goals");
            pos__ = 0;
            size_t goals_k_0_max__ = Ng;
            for (size_t k_0__ = 0; k_0__ < goals_k_0_max__; ++k_0__) {
                goals[k_0__] = vals_i__[pos__++];
            }
            size_t goals_i_0_max__ = Ng;
            for (size_t i_0__ = 0; i_0__ < goals_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "goals[i_0__]", goals[i_0__], 0);
            }

            current_statement_begin__ = 7;
            validate_non_negative_index("hteam_ind", "Ng", Ng);
            context__.validate_dims("data initialization", "hteam_ind", "int", context__.to_vec(Ng));
            hteam_ind = std::vector<int>(Ng, int(0));
            vals_i__ = context__.vals_i("hteam_ind");
            pos__ = 0;
            size_t hteam_ind_k_0_max__ = Ng;
            for (size_t k_0__ = 0; k_0__ < hteam_ind_k_0_max__; ++k_0__) {
                hteam_ind[k_0__] = vals_i__[pos__++];
            }
            size_t hteam_ind_i_0_max__ = Ng;
            for (size_t i_0__ = 0; i_0__ < hteam_ind_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "hteam_ind[i_0__]", hteam_ind[i_0__], 1);
                check_less_or_equal(function__, "hteam_ind[i_0__]", hteam_ind[i_0__], Nht);
            }

            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "alpha_mean", "double", context__.to_vec());
            alpha_mean = double(0);
            vals_r__ = context__.vals_r("alpha_mean");
            pos__ = 0;
            alpha_mean = vals_r__[pos__++];

            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "alpha_sd", "double", context__.to_vec());
            alpha_sd = double(0);
            vals_r__ = context__.vals_r("alpha_sd");
            pos__ = 0;
            alpha_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "alpha_sd", alpha_sd, 0);

            current_statement_begin__ = 10;
            context__.validate_dims("data initialization", "phi_mean", "double", context__.to_vec());
            phi_mean = double(0);
            vals_r__ = context__.vals_r("phi_mean");
            pos__ = 0;
            phi_mean = vals_r__[pos__++];
            check_greater_or_equal(function__, "phi_mean", phi_mean, 0);

            current_statement_begin__ = 11;
            context__.validate_dims("data initialization", "phi_sd", "double", context__.to_vec());
            phi_sd = double(0);
            vals_r__ = context__.vals_r("phi_sd");
            pos__ = 0;
            phi_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "phi_sd", phi_sd, 0);

            current_statement_begin__ = 12;
            context__.validate_dims("data initialization", "hteam_mean", "double", context__.to_vec());
            hteam_mean = double(0);
            vals_r__ = context__.vals_r("hteam_mean");
            pos__ = 0;
            hteam_mean = vals_r__[pos__++];

            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "hteam_sigma", "double", context__.to_vec());
            hteam_sigma = double(0);
            vals_r__ = context__.vals_r("hteam_sigma");
            pos__ = 0;
            hteam_sigma = vals_r__[pos__++];


            // initialize transformed data variables
            // execute transformed data statements

            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 20;
            num_params_r__ += 1;
            current_statement_begin__ = 21;
            num_params_r__ += 1;
            current_statement_begin__ = 22;
            validate_non_negative_index("hteam_raw", "Nht", Nht);
            num_params_r__ += Nht;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~simplest_football_regression_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 20;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "alpha", "double", context__.to_vec());
        double alpha(0);
        alpha = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(alpha);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 21;
        if (!(context__.contains_r("phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "phi", "double", context__.to_vec());
        double phi(0);
        phi = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(phi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 22;
        if (!(context__.contains_r("hteam_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable hteam_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("hteam_raw");
        pos__ = 0U;
        validate_non_negative_index("hteam_raw", "Nht", Nht);
        context__.validate_dims("parameter initialization", "hteam_raw", "vector_d", context__.to_vec(Nht));
        Eigen::Matrix<double, Eigen::Dynamic, 1> hteam_raw(Nht);
        size_t hteam_raw_j_1_max__ = Nht;
        for (size_t j_1__ = 0; j_1__ < hteam_raw_j_1_max__; ++j_1__) {
            hteam_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(hteam_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable hteam_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 20;
            local_scalar_t__ alpha;
            (void) alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha = in__.scalar_constrain(lp__);
            else
                alpha = in__.scalar_constrain();

            current_statement_begin__ = 21;
            local_scalar_t__ phi;
            (void) phi;  // dummy to suppress unused var warning
            if (jacobian__)
                phi = in__.scalar_constrain(lp__);
            else
                phi = in__.scalar_constrain();

            current_statement_begin__ = 22;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> hteam_raw;
            (void) hteam_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                hteam_raw = in__.vector_constrain(Nht, lp__);
            else
                hteam_raw = in__.vector_constrain(Nht);

            // transformed parameters
            current_statement_begin__ = 27;
            validate_non_negative_index("hteam", "Nht", Nht);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> hteam(Nht);
            stan::math::initialize(hteam, DUMMY_VAR__);
            stan::math::fill(hteam, DUMMY_VAR__);
            stan::math::assign(hteam,add((alpha + hteam_mean), multiply(hteam_sigma, hteam_raw)));

            current_statement_begin__ = 28;
            validate_non_negative_index("mu", "Ng", Ng);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu(Ng);
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            stan::math::assign(mu,stan::model::rvalue(hteam, stan::model::cons_list(stan::model::index_multi(hteam_ind), stan::model::nil_index_list()), "hteam"));

            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 27;
            size_t hteam_j_1_max__ = Nht;
            for (size_t j_1__ = 0; j_1__ < hteam_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(hteam(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: hteam" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable hteam: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 28;
            size_t mu_j_1_max__ = Ng;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(mu(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }

            // model body

            current_statement_begin__ = 33;
            lp_accum__.add(neg_binomial_2_log_log<propto__>(goals, mu, phi));
            current_statement_begin__ = 36;
            lp_accum__.add(normal_log<propto__>(alpha, alpha_mean, alpha_sd));
            current_statement_begin__ = 37;
            lp_accum__.add(normal_log<propto__>(phi, phi_mean, phi_sd));
            current_statement_begin__ = 38;
            lp_accum__.add(normal_log<propto__>(hteam_raw, 0, 1));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("alpha");
        names__.push_back("phi");
        names__.push_back("hteam_raw");
        names__.push_back("hteam");
        names__.push_back("mu");
        names__.push_back("pred_goals_rep");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Nht);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Nht);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Ng);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Ng);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "simplest_football_regression_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        double alpha = in__.scalar_constrain();
        vars__.push_back(alpha);

        double phi = in__.scalar_constrain();
        vars__.push_back(phi);

        Eigen::Matrix<double, Eigen::Dynamic, 1> hteam_raw = in__.vector_constrain(Nht);
        size_t hteam_raw_j_1_max__ = Nht;
        for (size_t j_1__ = 0; j_1__ < hteam_raw_j_1_max__; ++j_1__) {
            vars__.push_back(hteam_raw(j_1__));
        }

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            // declare and define transformed parameters
            current_statement_begin__ = 27;
            validate_non_negative_index("hteam", "Nht", Nht);
            Eigen::Matrix<double, Eigen::Dynamic, 1> hteam(Nht);
            stan::math::initialize(hteam, DUMMY_VAR__);
            stan::math::fill(hteam, DUMMY_VAR__);
            stan::math::assign(hteam,add((alpha + hteam_mean), multiply(hteam_sigma, hteam_raw)));

            current_statement_begin__ = 28;
            validate_non_negative_index("mu", "Ng", Ng);
            Eigen::Matrix<double, Eigen::Dynamic, 1> mu(Ng);
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            stan::math::assign(mu,stan::model::rvalue(hteam, stan::model::cons_list(stan::model::index_multi(hteam_ind), stan::model::nil_index_list()), "hteam"));

            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // write transformed parameters
            if (include_tparams__) {
                size_t hteam_j_1_max__ = Nht;
                for (size_t j_1__ = 0; j_1__ < hteam_j_1_max__; ++j_1__) {
                    vars__.push_back(hteam(j_1__));
                }
                size_t mu_j_1_max__ = Ng;
                for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                    vars__.push_back(mu(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 46;
            validate_non_negative_index("pred_goals_rep", "Ng", Ng);
            std::vector<int> pred_goals_rep(Ng, int(0));
            stan::math::fill(pred_goals_rep, std::numeric_limits<int>::min());

            // generated quantities statements
            current_statement_begin__ = 47;
            for (int n = 1; n <= Ng; ++n) {

                current_statement_begin__ = 48;
                if (as_bool(logical_gt(get_base1(mu, n, "mu", 1), 20))) {

                    current_statement_begin__ = 49;
                    std::stringstream errmsg_stream__;
                    errmsg_stream__ << "mu out of bounds, rejected...";
                    throw std::domain_error(errmsg_stream__.str());
                }
                current_statement_begin__ = 51;
                stan::model::assign(pred_goals_rep, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            neg_binomial_2_log_rng(get_base1(mu, n, "mu", 1), phi, base_rng__), 
                            "assigning variable pred_goals_rep");
            }

            // validate, write generated quantities
            current_statement_begin__ = 46;
            size_t pred_goals_rep_k_0_max__ = Ng;
            for (size_t k_0__ = 0; k_0__ < pred_goals_rep_k_0_max__; ++k_0__) {
                vars__.push_back(pred_goals_rep[k_0__]);
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    std::string model_name() const {
        return "simplest_football_regression_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());
        size_t hteam_raw_j_1_max__ = Nht;
        for (size_t j_1__ = 0; j_1__ < hteam_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "hteam_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t hteam_j_1_max__ = Nht;
            for (size_t j_1__ = 0; j_1__ < hteam_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "hteam" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t mu_j_1_max__ = Ng;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        size_t pred_goals_rep_k_0_max__ = Ng;
        for (size_t k_0__ = 0; k_0__ < pred_goals_rep_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pred_goals_rep" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());
        size_t hteam_raw_j_1_max__ = Nht;
        for (size_t j_1__ = 0; j_1__ < hteam_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "hteam_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t hteam_j_1_max__ = Nht;
            for (size_t j_1__ = 0; j_1__ < hteam_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "hteam" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t mu_j_1_max__ = Ng;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        size_t pred_goals_rep_k_0_max__ = Ng;
        for (size_t k_0__ = 0; k_0__ < pred_goals_rep_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pred_goals_rep" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}  // namespace

typedef simplest_football_regression_model_namespace::simplest_football_regression_model stan_model;

#ifndef USING_R

stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif

