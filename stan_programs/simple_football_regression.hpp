// Code generated by Stan version 2.20.0

#include <stan/model/model_header.hpp>

namespace simple_football_regression_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "simple_football_regression.stan");
    reader.add_event(76, 74, "end", "simple_football_regression.stan");
    return reader;
}

class simple_football_regression_model
  : public stan::model::model_base_crtp<simple_football_regression_model> {
private:
        int Ng;
        int Nt;
        std::vector<int> hgoals;
        std::vector<int> agoals;
        std::vector<int> goaldiff;
        std::vector<int> hteam_ind;
        std::vector<int> ateam_ind;
        double beta_sd;
        double hteam_mean;
        double hteam_sigma;
        double ateam_mean;
        double ateam_sigma;
        double a_alpha_mean;
        double a_alpha_sd;
        double h_alpha_mean;
        double h_alpha_sd;
public:
    simple_football_regression_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }

    simple_football_regression_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "simple_football_regression_model_namespace::simple_football_regression_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "Ng", "int", context__.to_vec());
            Ng = int(0);
            vals_i__ = context__.vals_i("Ng");
            pos__ = 0;
            Ng = vals_i__[pos__++];
            check_greater_or_equal(function__, "Ng", Ng, 1);

            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "Nt", "int", context__.to_vec());
            Nt = int(0);
            vals_i__ = context__.vals_i("Nt");
            pos__ = 0;
            Nt = vals_i__[pos__++];
            check_greater_or_equal(function__, "Nt", Nt, 1);

            current_statement_begin__ = 6;
            validate_non_negative_index("hgoals", "Ng", Ng);
            context__.validate_dims("data initialization", "hgoals", "int", context__.to_vec(Ng));
            hgoals = std::vector<int>(Ng, int(0));
            vals_i__ = context__.vals_i("hgoals");
            pos__ = 0;
            size_t hgoals_k_0_max__ = Ng;
            for (size_t k_0__ = 0; k_0__ < hgoals_k_0_max__; ++k_0__) {
                hgoals[k_0__] = vals_i__[pos__++];
            }
            size_t hgoals_i_0_max__ = Ng;
            for (size_t i_0__ = 0; i_0__ < hgoals_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "hgoals[i_0__]", hgoals[i_0__], 0);
            }

            current_statement_begin__ = 7;
            validate_non_negative_index("agoals", "Ng", Ng);
            context__.validate_dims("data initialization", "agoals", "int", context__.to_vec(Ng));
            agoals = std::vector<int>(Ng, int(0));
            vals_i__ = context__.vals_i("agoals");
            pos__ = 0;
            size_t agoals_k_0_max__ = Ng;
            for (size_t k_0__ = 0; k_0__ < agoals_k_0_max__; ++k_0__) {
                agoals[k_0__] = vals_i__[pos__++];
            }
            size_t agoals_i_0_max__ = Ng;
            for (size_t i_0__ = 0; i_0__ < agoals_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "agoals[i_0__]", agoals[i_0__], 0);
            }

            current_statement_begin__ = 8;
            validate_non_negative_index("goaldiff", "Ng", Ng);
            context__.validate_dims("data initialization", "goaldiff", "int", context__.to_vec(Ng));
            goaldiff = std::vector<int>(Ng, int(0));
            vals_i__ = context__.vals_i("goaldiff");
            pos__ = 0;
            size_t goaldiff_k_0_max__ = Ng;
            for (size_t k_0__ = 0; k_0__ < goaldiff_k_0_max__; ++k_0__) {
                goaldiff[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 9;
            validate_non_negative_index("hteam_ind", "Ng", Ng);
            context__.validate_dims("data initialization", "hteam_ind", "int", context__.to_vec(Ng));
            hteam_ind = std::vector<int>(Ng, int(0));
            vals_i__ = context__.vals_i("hteam_ind");
            pos__ = 0;
            size_t hteam_ind_k_0_max__ = Ng;
            for (size_t k_0__ = 0; k_0__ < hteam_ind_k_0_max__; ++k_0__) {
                hteam_ind[k_0__] = vals_i__[pos__++];
            }
            size_t hteam_ind_i_0_max__ = Ng;
            for (size_t i_0__ = 0; i_0__ < hteam_ind_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "hteam_ind[i_0__]", hteam_ind[i_0__], 1);
                check_less_or_equal(function__, "hteam_ind[i_0__]", hteam_ind[i_0__], Nt);
            }

            current_statement_begin__ = 10;
            validate_non_negative_index("ateam_ind", "Ng", Ng);
            context__.validate_dims("data initialization", "ateam_ind", "int", context__.to_vec(Ng));
            ateam_ind = std::vector<int>(Ng, int(0));
            vals_i__ = context__.vals_i("ateam_ind");
            pos__ = 0;
            size_t ateam_ind_k_0_max__ = Ng;
            for (size_t k_0__ = 0; k_0__ < ateam_ind_k_0_max__; ++k_0__) {
                ateam_ind[k_0__] = vals_i__[pos__++];
            }
            size_t ateam_ind_i_0_max__ = Ng;
            for (size_t i_0__ = 0; i_0__ < ateam_ind_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "ateam_ind[i_0__]", ateam_ind[i_0__], 1);
                check_less_or_equal(function__, "ateam_ind[i_0__]", ateam_ind[i_0__], Nt);
            }

            current_statement_begin__ = 11;
            context__.validate_dims("data initialization", "beta_sd", "double", context__.to_vec());
            beta_sd = double(0);
            vals_r__ = context__.vals_r("beta_sd");
            pos__ = 0;
            beta_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "beta_sd", beta_sd, 0);

            current_statement_begin__ = 12;
            context__.validate_dims("data initialization", "hteam_mean", "double", context__.to_vec());
            hteam_mean = double(0);
            vals_r__ = context__.vals_r("hteam_mean");
            pos__ = 0;
            hteam_mean = vals_r__[pos__++];

            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "hteam_sigma", "double", context__.to_vec());
            hteam_sigma = double(0);
            vals_r__ = context__.vals_r("hteam_sigma");
            pos__ = 0;
            hteam_sigma = vals_r__[pos__++];

            current_statement_begin__ = 14;
            context__.validate_dims("data initialization", "ateam_mean", "double", context__.to_vec());
            ateam_mean = double(0);
            vals_r__ = context__.vals_r("ateam_mean");
            pos__ = 0;
            ateam_mean = vals_r__[pos__++];

            current_statement_begin__ = 15;
            context__.validate_dims("data initialization", "ateam_sigma", "double", context__.to_vec());
            ateam_sigma = double(0);
            vals_r__ = context__.vals_r("ateam_sigma");
            pos__ = 0;
            ateam_sigma = vals_r__[pos__++];

            current_statement_begin__ = 16;
            context__.validate_dims("data initialization", "a_alpha_mean", "double", context__.to_vec());
            a_alpha_mean = double(0);
            vals_r__ = context__.vals_r("a_alpha_mean");
            pos__ = 0;
            a_alpha_mean = vals_r__[pos__++];

            current_statement_begin__ = 17;
            context__.validate_dims("data initialization", "a_alpha_sd", "double", context__.to_vec());
            a_alpha_sd = double(0);
            vals_r__ = context__.vals_r("a_alpha_sd");
            pos__ = 0;
            a_alpha_sd = vals_r__[pos__++];

            current_statement_begin__ = 18;
            context__.validate_dims("data initialization", "h_alpha_mean", "double", context__.to_vec());
            h_alpha_mean = double(0);
            vals_r__ = context__.vals_r("h_alpha_mean");
            pos__ = 0;
            h_alpha_mean = vals_r__[pos__++];

            current_statement_begin__ = 19;
            context__.validate_dims("data initialization", "h_alpha_sd", "double", context__.to_vec());
            h_alpha_sd = double(0);
            vals_r__ = context__.vals_r("h_alpha_sd");
            pos__ = 0;
            h_alpha_sd = vals_r__[pos__++];


            // initialize transformed data variables
            // execute transformed data statements

            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 25;
            num_params_r__ += 1;
            current_statement_begin__ = 26;
            num_params_r__ += 1;
            current_statement_begin__ = 27;
            num_params_r__ += 1;
            current_statement_begin__ = 28;
            num_params_r__ += 1;
            current_statement_begin__ = 29;
            validate_non_negative_index("ateam_raw", "Nt", Nt);
            num_params_r__ += Nt;
            current_statement_begin__ = 30;
            validate_non_negative_index("hteam_raw", "Nt", Nt);
            num_params_r__ += Nt;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~simple_football_regression_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 25;
        if (!(context__.contains_r("a_alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable a_alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("a_alpha");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "a_alpha", "double", context__.to_vec());
        double a_alpha(0);
        a_alpha = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(a_alpha);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable a_alpha: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 26;
        if (!(context__.contains_r("h_alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h_alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h_alpha");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "h_alpha", "double", context__.to_vec());
        double h_alpha(0);
        h_alpha = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(h_alpha);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h_alpha: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 27;
        if (!(context__.contains_r("a_phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable a_phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("a_phi");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "a_phi", "double", context__.to_vec());
        double a_phi(0);
        a_phi = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(a_phi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable a_phi: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 28;
        if (!(context__.contains_r("h_phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h_phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h_phi");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "h_phi", "double", context__.to_vec());
        double h_phi(0);
        h_phi = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(h_phi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h_phi: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 29;
        if (!(context__.contains_r("ateam_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable ateam_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("ateam_raw");
        pos__ = 0U;
        validate_non_negative_index("ateam_raw", "Nt", Nt);
        context__.validate_dims("parameter initialization", "ateam_raw", "vector_d", context__.to_vec(Nt));
        Eigen::Matrix<double, Eigen::Dynamic, 1> ateam_raw(Nt);
        size_t ateam_raw_j_1_max__ = Nt;
        for (size_t j_1__ = 0; j_1__ < ateam_raw_j_1_max__; ++j_1__) {
            ateam_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(ateam_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable ateam_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 30;
        if (!(context__.contains_r("hteam_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable hteam_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("hteam_raw");
        pos__ = 0U;
        validate_non_negative_index("hteam_raw", "Nt", Nt);
        context__.validate_dims("parameter initialization", "hteam_raw", "vector_d", context__.to_vec(Nt));
        Eigen::Matrix<double, Eigen::Dynamic, 1> hteam_raw(Nt);
        size_t hteam_raw_j_1_max__ = Nt;
        for (size_t j_1__ = 0; j_1__ < hteam_raw_j_1_max__; ++j_1__) {
            hteam_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(hteam_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable hteam_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 25;
            local_scalar_t__ a_alpha;
            (void) a_alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                a_alpha = in__.scalar_constrain(lp__);
            else
                a_alpha = in__.scalar_constrain();

            current_statement_begin__ = 26;
            local_scalar_t__ h_alpha;
            (void) h_alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                h_alpha = in__.scalar_constrain(lp__);
            else
                h_alpha = in__.scalar_constrain();

            current_statement_begin__ = 27;
            local_scalar_t__ a_phi;
            (void) a_phi;  // dummy to suppress unused var warning
            if (jacobian__)
                a_phi = in__.scalar_constrain(lp__);
            else
                a_phi = in__.scalar_constrain();

            current_statement_begin__ = 28;
            local_scalar_t__ h_phi;
            (void) h_phi;  // dummy to suppress unused var warning
            if (jacobian__)
                h_phi = in__.scalar_constrain(lp__);
            else
                h_phi = in__.scalar_constrain();

            current_statement_begin__ = 29;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> ateam_raw;
            (void) ateam_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                ateam_raw = in__.vector_constrain(Nt, lp__);
            else
                ateam_raw = in__.vector_constrain(Nt);

            current_statement_begin__ = 30;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> hteam_raw;
            (void) hteam_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                hteam_raw = in__.vector_constrain(Nt, lp__);
            else
                hteam_raw = in__.vector_constrain(Nt);

            // transformed parameters
            current_statement_begin__ = 35;
            validate_non_negative_index("hteam", "Nt", Nt);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> hteam(Nt);
            stan::math::initialize(hteam, DUMMY_VAR__);
            stan::math::fill(hteam, DUMMY_VAR__);
            stan::math::assign(hteam,add((h_alpha + hteam_mean), multiply(hteam_sigma, hteam_raw)));

            current_statement_begin__ = 36;
            validate_non_negative_index("h_mu", "Ng", Ng);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h_mu(Ng);
            stan::math::initialize(h_mu, DUMMY_VAR__);
            stan::math::fill(h_mu, DUMMY_VAR__);
            stan::math::assign(h_mu,stan::model::rvalue(hteam, stan::model::cons_list(stan::model::index_multi(hteam_ind), stan::model::nil_index_list()), "hteam"));

            current_statement_begin__ = 37;
            validate_non_negative_index("ateam", "Nt", Nt);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> ateam(Nt);
            stan::math::initialize(ateam, DUMMY_VAR__);
            stan::math::fill(ateam, DUMMY_VAR__);
            stan::math::assign(ateam,add((a_alpha + ateam_mean), multiply(ateam_sigma, ateam_raw)));

            current_statement_begin__ = 38;
            validate_non_negative_index("a_mu", "Ng", Ng);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> a_mu(Ng);
            stan::math::initialize(a_mu, DUMMY_VAR__);
            stan::math::fill(a_mu, DUMMY_VAR__);
            stan::math::assign(a_mu,stan::model::rvalue(ateam, stan::model::cons_list(stan::model::index_multi(ateam_ind), stan::model::nil_index_list()), "ateam"));

            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 35;
            size_t hteam_j_1_max__ = Nt;
            for (size_t j_1__ = 0; j_1__ < hteam_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(hteam(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: hteam" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable hteam: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 36;
            size_t h_mu_j_1_max__ = Ng;
            for (size_t j_1__ = 0; j_1__ < h_mu_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(h_mu(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: h_mu" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable h_mu: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 37;
            size_t ateam_j_1_max__ = Nt;
            for (size_t j_1__ = 0; j_1__ < ateam_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(ateam(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: ateam" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable ateam: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 38;
            size_t a_mu_j_1_max__ = Ng;
            for (size_t j_1__ = 0; j_1__ < a_mu_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(a_mu(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: a_mu" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable a_mu: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }

            // model body

            current_statement_begin__ = 43;
            lp_accum__.add(neg_binomial_2_log_log<propto__>(hgoals, h_mu, h_phi));
            current_statement_begin__ = 44;
            lp_accum__.add(neg_binomial_2_log_log<propto__>(agoals, a_mu, a_phi));
            current_statement_begin__ = 47;
            lp_accum__.add(normal_log<propto__>(h_alpha, h_alpha_mean, h_alpha_sd));
            current_statement_begin__ = 48;
            lp_accum__.add(normal_log<propto__>(a_alpha, a_alpha_mean, a_alpha_sd));
            current_statement_begin__ = 49;
            lp_accum__.add(normal_log<propto__>(h_phi, 5, 1));
            current_statement_begin__ = 50;
            lp_accum__.add(normal_log<propto__>(a_phi, 5, 1));
            current_statement_begin__ = 51;
            lp_accum__.add(normal_log<propto__>(hteam_raw, 0, 1));
            current_statement_begin__ = 52;
            lp_accum__.add(normal_log<propto__>(ateam_raw, 0, 1));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("a_alpha");
        names__.push_back("h_alpha");
        names__.push_back("a_phi");
        names__.push_back("h_phi");
        names__.push_back("ateam_raw");
        names__.push_back("hteam_raw");
        names__.push_back("hteam");
        names__.push_back("h_mu");
        names__.push_back("ateam");
        names__.push_back("a_mu");
        names__.push_back("pred_goaldiff_rep");
        names__.push_back("i");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Ng);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Ng);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((Nt * Nt));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "simple_football_regression_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        double a_alpha = in__.scalar_constrain();
        vars__.push_back(a_alpha);

        double h_alpha = in__.scalar_constrain();
        vars__.push_back(h_alpha);

        double a_phi = in__.scalar_constrain();
        vars__.push_back(a_phi);

        double h_phi = in__.scalar_constrain();
        vars__.push_back(h_phi);

        Eigen::Matrix<double, Eigen::Dynamic, 1> ateam_raw = in__.vector_constrain(Nt);
        size_t ateam_raw_j_1_max__ = Nt;
        for (size_t j_1__ = 0; j_1__ < ateam_raw_j_1_max__; ++j_1__) {
            vars__.push_back(ateam_raw(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> hteam_raw = in__.vector_constrain(Nt);
        size_t hteam_raw_j_1_max__ = Nt;
        for (size_t j_1__ = 0; j_1__ < hteam_raw_j_1_max__; ++j_1__) {
            vars__.push_back(hteam_raw(j_1__));
        }

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            // declare and define transformed parameters
            current_statement_begin__ = 35;
            validate_non_negative_index("hteam", "Nt", Nt);
            Eigen::Matrix<double, Eigen::Dynamic, 1> hteam(Nt);
            stan::math::initialize(hteam, DUMMY_VAR__);
            stan::math::fill(hteam, DUMMY_VAR__);
            stan::math::assign(hteam,add((h_alpha + hteam_mean), multiply(hteam_sigma, hteam_raw)));

            current_statement_begin__ = 36;
            validate_non_negative_index("h_mu", "Ng", Ng);
            Eigen::Matrix<double, Eigen::Dynamic, 1> h_mu(Ng);
            stan::math::initialize(h_mu, DUMMY_VAR__);
            stan::math::fill(h_mu, DUMMY_VAR__);
            stan::math::assign(h_mu,stan::model::rvalue(hteam, stan::model::cons_list(stan::model::index_multi(hteam_ind), stan::model::nil_index_list()), "hteam"));

            current_statement_begin__ = 37;
            validate_non_negative_index("ateam", "Nt", Nt);
            Eigen::Matrix<double, Eigen::Dynamic, 1> ateam(Nt);
            stan::math::initialize(ateam, DUMMY_VAR__);
            stan::math::fill(ateam, DUMMY_VAR__);
            stan::math::assign(ateam,add((a_alpha + ateam_mean), multiply(ateam_sigma, ateam_raw)));

            current_statement_begin__ = 38;
            validate_non_negative_index("a_mu", "Ng", Ng);
            Eigen::Matrix<double, Eigen::Dynamic, 1> a_mu(Ng);
            stan::math::initialize(a_mu, DUMMY_VAR__);
            stan::math::fill(a_mu, DUMMY_VAR__);
            stan::math::assign(a_mu,stan::model::rvalue(ateam, stan::model::cons_list(stan::model::index_multi(ateam_ind), stan::model::nil_index_list()), "ateam"));

            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // write transformed parameters
            if (include_tparams__) {
                size_t hteam_j_1_max__ = Nt;
                for (size_t j_1__ = 0; j_1__ < hteam_j_1_max__; ++j_1__) {
                    vars__.push_back(hteam(j_1__));
                }
                size_t h_mu_j_1_max__ = Ng;
                for (size_t j_1__ = 0; j_1__ < h_mu_j_1_max__; ++j_1__) {
                    vars__.push_back(h_mu(j_1__));
                }
                size_t ateam_j_1_max__ = Nt;
                for (size_t j_1__ = 0; j_1__ < ateam_j_1_max__; ++j_1__) {
                    vars__.push_back(ateam(j_1__));
                }
                size_t a_mu_j_1_max__ = Ng;
                for (size_t j_1__ = 0; j_1__ < a_mu_j_1_max__; ++j_1__) {
                    vars__.push_back(a_mu(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 60;
            validate_non_negative_index("pred_goaldiff_rep", "(Nt * Nt)", (Nt * Nt));
            std::vector<int> pred_goaldiff_rep((Nt * Nt), int(0));
            stan::math::fill(pred_goaldiff_rep, std::numeric_limits<int>::min());

            current_statement_begin__ = 61;
            int i;
            (void) i;  // dummy to suppress unused var warning
            stan::math::fill(i, std::numeric_limits<int>::min());
            stan::math::assign(i,1);

            // generated quantities statements
            current_statement_begin__ = 62;
            for (int hnt = 1; hnt <= Nt; ++hnt) {

                current_statement_begin__ = 63;
                for (int ant = 1; ant <= Nt; ++ant) {

                    current_statement_begin__ = 64;
                    if (as_bool(logical_gt(get_base1(h_mu, hnt, "h_mu", 1), 20))) {

                        current_statement_begin__ = 65;
                        std::stringstream errmsg_stream__;
                        errmsg_stream__ << "mu out of bounds, rejected...";
                        throw std::domain_error(errmsg_stream__.str());
                    }
                    current_statement_begin__ = 67;
                    if (as_bool(logical_gt(get_base1(a_mu, ant, "a_mu", 1), 20))) {

                        current_statement_begin__ = 68;
                        std::stringstream errmsg_stream__;
                        errmsg_stream__ << "mu out of bounds, rejected...";
                        throw std::domain_error(errmsg_stream__.str());
                    }
                    current_statement_begin__ = 70;
                    stan::model::assign(pred_goaldiff_rep, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(hgoals, hnt, "hgoals", 1) - get_base1(agoals, ant, "agoals", 1)), 
                                "assigning variable pred_goaldiff_rep");
                    current_statement_begin__ = 71;
                    stan::math::assign(i, (i + 1));
                }
            }

            // validate, write generated quantities
            current_statement_begin__ = 60;
            size_t pred_goaldiff_rep_k_0_max__ = (Nt * Nt);
            for (size_t k_0__ = 0; k_0__ < pred_goaldiff_rep_k_0_max__; ++k_0__) {
                vars__.push_back(pred_goaldiff_rep[k_0__]);
            }

            current_statement_begin__ = 61;
            vars__.push_back(i);

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    std::string model_name() const {
        return "simple_football_regression_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "a_alpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h_alpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "a_phi";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h_phi";
        param_names__.push_back(param_name_stream__.str());
        size_t ateam_raw_j_1_max__ = Nt;
        for (size_t j_1__ = 0; j_1__ < ateam_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ateam_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t hteam_raw_j_1_max__ = Nt;
        for (size_t j_1__ = 0; j_1__ < hteam_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "hteam_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t hteam_j_1_max__ = Nt;
            for (size_t j_1__ = 0; j_1__ < hteam_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "hteam" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t h_mu_j_1_max__ = Ng;
            for (size_t j_1__ = 0; j_1__ < h_mu_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "h_mu" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t ateam_j_1_max__ = Nt;
            for (size_t j_1__ = 0; j_1__ < ateam_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "ateam" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t a_mu_j_1_max__ = Ng;
            for (size_t j_1__ = 0; j_1__ < a_mu_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "a_mu" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        size_t pred_goaldiff_rep_k_0_max__ = (Nt * Nt);
        for (size_t k_0__ = 0; k_0__ < pred_goaldiff_rep_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pred_goaldiff_rep" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "i";
        param_names__.push_back(param_name_stream__.str());
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "a_alpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h_alpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "a_phi";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h_phi";
        param_names__.push_back(param_name_stream__.str());
        size_t ateam_raw_j_1_max__ = Nt;
        for (size_t j_1__ = 0; j_1__ < ateam_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ateam_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t hteam_raw_j_1_max__ = Nt;
        for (size_t j_1__ = 0; j_1__ < hteam_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "hteam_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t hteam_j_1_max__ = Nt;
            for (size_t j_1__ = 0; j_1__ < hteam_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "hteam" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t h_mu_j_1_max__ = Ng;
            for (size_t j_1__ = 0; j_1__ < h_mu_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "h_mu" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t ateam_j_1_max__ = Nt;
            for (size_t j_1__ = 0; j_1__ < ateam_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "ateam" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t a_mu_j_1_max__ = Ng;
            for (size_t j_1__ = 0; j_1__ < a_mu_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "a_mu" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        size_t pred_goaldiff_rep_k_0_max__ = (Nt * Nt);
        for (size_t k_0__ = 0; k_0__ < pred_goaldiff_rep_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pred_goaldiff_rep" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "i";
        param_names__.push_back(param_name_stream__.str());
    }

}; // model

}  // namespace

typedef simple_football_regression_model_namespace::simple_football_regression_model stan_model;

#ifndef USING_R

stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif

