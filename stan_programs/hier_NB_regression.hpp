// Code generated by Stan version 2.20.0

#include <stan/model/model_header.hpp>

namespace hier_NB_regression_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "hier_NB_regression.stan");
    reader.add_event(77, 75, "end", "hier_NB_regression.stan");
    return reader;
}

class hier_NB_regression_model
  : public stan::model::model_base_crtp<hier_NB_regression_model> {
private:
        int N;
        std::vector<int> complaints;
        vector_d traps;
        double alpha_mean;
        double alpha_sd;
        double beta_mean;
        double beta_sd;
        vector_d log_sq_foot;
        vector_d live_in_super;
        double beta_super_mean;
        double beta_super_sd;
        double phi_mean;
        double phi_sd;
        int J;
        int K;
        std::vector<int> building_idx;
        matrix_d building_data;
        double mub_sigma_mean;
        double mub_sigma_sd;
        double zeta_mean;
        double zeta_sd;
public:
    hier_NB_regression_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }

    hier_NB_regression_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "hier_NB_regression_model_namespace::hier_NB_regression_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);

            current_statement_begin__ = 4;
            validate_non_negative_index("complaints", "N", N);
            context__.validate_dims("data initialization", "complaints", "int", context__.to_vec(N));
            complaints = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("complaints");
            pos__ = 0;
            size_t complaints_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < complaints_k_0_max__; ++k_0__) {
                complaints[k_0__] = vals_i__[pos__++];
            }
            size_t complaints_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < complaints_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "complaints[i_0__]", complaints[i_0__], 0);
            }

            current_statement_begin__ = 5;
            validate_non_negative_index("traps", "N", N);
            context__.validate_dims("data initialization", "traps", "vector_d", context__.to_vec(N));
            traps = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("traps");
            pos__ = 0;
            size_t traps_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < traps_j_1_max__; ++j_1__) {
                traps(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "traps", traps, 0);

            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "alpha_mean", "double", context__.to_vec());
            alpha_mean = double(0);
            vals_r__ = context__.vals_r("alpha_mean");
            pos__ = 0;
            alpha_mean = vals_r__[pos__++];

            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "alpha_sd", "double", context__.to_vec());
            alpha_sd = double(0);
            vals_r__ = context__.vals_r("alpha_sd");
            pos__ = 0;
            alpha_sd = vals_r__[pos__++];

            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "beta_mean", "double", context__.to_vec());
            beta_mean = double(0);
            vals_r__ = context__.vals_r("beta_mean");
            pos__ = 0;
            beta_mean = vals_r__[pos__++];

            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "beta_sd", "double", context__.to_vec());
            beta_sd = double(0);
            vals_r__ = context__.vals_r("beta_sd");
            pos__ = 0;
            beta_sd = vals_r__[pos__++];

            current_statement_begin__ = 10;
            validate_non_negative_index("log_sq_foot", "N", N);
            context__.validate_dims("data initialization", "log_sq_foot", "vector_d", context__.to_vec(N));
            log_sq_foot = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("log_sq_foot");
            pos__ = 0;
            size_t log_sq_foot_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < log_sq_foot_j_1_max__; ++j_1__) {
                log_sq_foot(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "log_sq_foot", log_sq_foot, 0);

            current_statement_begin__ = 11;
            validate_non_negative_index("live_in_super", "N", N);
            context__.validate_dims("data initialization", "live_in_super", "vector_d", context__.to_vec(N));
            live_in_super = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("live_in_super");
            pos__ = 0;
            size_t live_in_super_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < live_in_super_j_1_max__; ++j_1__) {
                live_in_super(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "live_in_super", live_in_super, 0);
            check_less_or_equal(function__, "live_in_super", live_in_super, 1);

            current_statement_begin__ = 12;
            context__.validate_dims("data initialization", "beta_super_mean", "double", context__.to_vec());
            beta_super_mean = double(0);
            vals_r__ = context__.vals_r("beta_super_mean");
            pos__ = 0;
            beta_super_mean = vals_r__[pos__++];

            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "beta_super_sd", "double", context__.to_vec());
            beta_super_sd = double(0);
            vals_r__ = context__.vals_r("beta_super_sd");
            pos__ = 0;
            beta_super_sd = vals_r__[pos__++];

            current_statement_begin__ = 14;
            context__.validate_dims("data initialization", "phi_mean", "double", context__.to_vec());
            phi_mean = double(0);
            vals_r__ = context__.vals_r("phi_mean");
            pos__ = 0;
            phi_mean = vals_r__[pos__++];
            check_greater_or_equal(function__, "phi_mean", phi_mean, 0);

            current_statement_begin__ = 15;
            context__.validate_dims("data initialization", "phi_sd", "double", context__.to_vec());
            phi_sd = double(0);
            vals_r__ = context__.vals_r("phi_sd");
            pos__ = 0;
            phi_sd = vals_r__[pos__++];

            current_statement_begin__ = 16;
            context__.validate_dims("data initialization", "J", "int", context__.to_vec());
            J = int(0);
            vals_i__ = context__.vals_i("J");
            pos__ = 0;
            J = vals_i__[pos__++];
            check_greater_or_equal(function__, "J", J, 1);

            current_statement_begin__ = 17;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 1);

            current_statement_begin__ = 18;
            validate_non_negative_index("building_idx", "N", N);
            context__.validate_dims("data initialization", "building_idx", "int", context__.to_vec(N));
            building_idx = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("building_idx");
            pos__ = 0;
            size_t building_idx_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < building_idx_k_0_max__; ++k_0__) {
                building_idx[k_0__] = vals_i__[pos__++];
            }
            size_t building_idx_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < building_idx_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "building_idx[i_0__]", building_idx[i_0__], 1);
                check_less_or_equal(function__, "building_idx[i_0__]", building_idx[i_0__], J);
            }

            current_statement_begin__ = 19;
            validate_non_negative_index("building_data", "J", J);
            validate_non_negative_index("building_data", "K", K);
            context__.validate_dims("data initialization", "building_data", "matrix_d", context__.to_vec(J,K));
            building_data = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(J, K);
            vals_r__ = context__.vals_r("building_data");
            pos__ = 0;
            size_t building_data_j_2_max__ = K;
            size_t building_data_j_1_max__ = J;
            for (size_t j_2__ = 0; j_2__ < building_data_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < building_data_j_1_max__; ++j_1__) {
                    building_data(j_1__, j_2__) = vals_r__[pos__++];
                }
            }

            current_statement_begin__ = 20;
            context__.validate_dims("data initialization", "mub_sigma_mean", "double", context__.to_vec());
            mub_sigma_mean = double(0);
            vals_r__ = context__.vals_r("mub_sigma_mean");
            pos__ = 0;
            mub_sigma_mean = vals_r__[pos__++];

            current_statement_begin__ = 21;
            context__.validate_dims("data initialization", "mub_sigma_sd", "double", context__.to_vec());
            mub_sigma_sd = double(0);
            vals_r__ = context__.vals_r("mub_sigma_sd");
            pos__ = 0;
            mub_sigma_sd = vals_r__[pos__++];

            current_statement_begin__ = 22;
            context__.validate_dims("data initialization", "zeta_mean", "double", context__.to_vec());
            zeta_mean = double(0);
            vals_r__ = context__.vals_r("zeta_mean");
            pos__ = 0;
            zeta_mean = vals_r__[pos__++];

            current_statement_begin__ = 23;
            context__.validate_dims("data initialization", "zeta_sd", "double", context__.to_vec());
            zeta_sd = double(0);
            vals_r__ = context__.vals_r("zeta_sd");
            pos__ = 0;
            zeta_sd = vals_r__[pos__++];


            // initialize transformed data variables
            // execute transformed data statements

            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 29;
            num_params_r__ += 1;
            current_statement_begin__ = 30;
            num_params_r__ += 1;
            current_statement_begin__ = 31;
            num_params_r__ += 1;
            current_statement_begin__ = 32;
            num_params_r__ += 1;
            current_statement_begin__ = 33;
            validate_non_negative_index("mub", "J", J);
            num_params_r__ += J;
            current_statement_begin__ = 34;
            validate_non_negative_index("zeta", "J", J);
            num_params_r__ += J;
            current_statement_begin__ = 35;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~hier_NB_regression_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 29;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "alpha", "double", context__.to_vec());
        double alpha(0);
        alpha = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(alpha);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 30;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "beta", "double", context__.to_vec());
        double beta(0);
        beta = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 31;
        if (!(context__.contains_r("beta_super")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_super missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_super");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "beta_super", "double", context__.to_vec());
        double beta_super(0);
        beta_super = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(beta_super);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_super: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 32;
        if (!(context__.contains_r("phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "phi", "double", context__.to_vec());
        double phi(0);
        phi = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(phi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 33;
        if (!(context__.contains_r("mub")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mub missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mub");
        pos__ = 0U;
        validate_non_negative_index("mub", "J", J);
        context__.validate_dims("parameter initialization", "mub", "vector_d", context__.to_vec(J));
        Eigen::Matrix<double, Eigen::Dynamic, 1> mub(J);
        size_t mub_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < mub_j_1_max__; ++j_1__) {
            mub(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(mub);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mub: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 34;
        if (!(context__.contains_r("zeta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable zeta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("zeta");
        pos__ = 0U;
        validate_non_negative_index("zeta", "J", J);
        context__.validate_dims("parameter initialization", "zeta", "vector_d", context__.to_vec(J));
        Eigen::Matrix<double, Eigen::Dynamic, 1> zeta(J);
        size_t zeta_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < zeta_j_1_max__; ++j_1__) {
            zeta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(zeta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable zeta: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 35;
        if (!(context__.contains_r("mub_sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mub_sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mub_sigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mub_sigma", "double", context__.to_vec());
        double mub_sigma(0);
        mub_sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, mub_sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mub_sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 29;
            local_scalar_t__ alpha;
            (void) alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha = in__.scalar_constrain(lp__);
            else
                alpha = in__.scalar_constrain();

            current_statement_begin__ = 30;
            local_scalar_t__ beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.scalar_constrain(lp__);
            else
                beta = in__.scalar_constrain();

            current_statement_begin__ = 31;
            local_scalar_t__ beta_super;
            (void) beta_super;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_super = in__.scalar_constrain(lp__);
            else
                beta_super = in__.scalar_constrain();

            current_statement_begin__ = 32;
            local_scalar_t__ phi;
            (void) phi;  // dummy to suppress unused var warning
            if (jacobian__)
                phi = in__.scalar_constrain(lp__);
            else
                phi = in__.scalar_constrain();

            current_statement_begin__ = 33;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mub;
            (void) mub;  // dummy to suppress unused var warning
            if (jacobian__)
                mub = in__.vector_constrain(J, lp__);
            else
                mub = in__.vector_constrain(J);

            current_statement_begin__ = 34;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> zeta;
            (void) zeta;  // dummy to suppress unused var warning
            if (jacobian__)
                zeta = in__.vector_constrain(J, lp__);
            else
                zeta = in__.vector_constrain(J);

            current_statement_begin__ = 35;
            local_scalar_t__ mub_sigma;
            (void) mub_sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                mub_sigma = in__.scalar_lb_constrain(0, lp__);
            else
                mub_sigma = in__.scalar_lb_constrain(0);

            // transformed parameters
            current_statement_begin__ = 40;
            validate_non_negative_index("mu", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu(N);
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            stan::math::assign(mu,add(add(stan::model::rvalue(mub, stan::model::cons_list(stan::model::index_multi(building_idx), stan::model::nil_index_list()), "mub"), multiply(beta, traps)), log_sq_foot));

            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 40;
            size_t mu_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(mu(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }

            // model body

            current_statement_begin__ = 48;
            lp_accum__.add(normal_log<propto__>(mub, add(alpha, multiply(building_data, zeta)), mub_sigma));
            current_statement_begin__ = 49;
            lp_accum__.add(neg_binomial_2_log_log<propto__>(complaints, mu, phi));
            current_statement_begin__ = 55;
            lp_accum__.add(normal_log<propto__>(alpha, alpha_mean, alpha_sd));
            current_statement_begin__ = 56;
            lp_accum__.add(normal_log<propto__>(beta, beta_mean, beta_sd));
            current_statement_begin__ = 57;
            lp_accum__.add(normal_log<propto__>(beta_super, beta_super_mean, beta_super_sd));
            current_statement_begin__ = 58;
            lp_accum__.add(normal_log<propto__>(phi, phi_mean, phi_sd));
            current_statement_begin__ = 59;
            lp_accum__.add(normal_log<propto__>(mub_sigma, mub_sigma_mean, mub_sigma_sd));
            current_statement_begin__ = 60;
            lp_accum__.add(normal_log<propto__>(zeta, zeta_mean, zeta_sd));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("alpha");
        names__.push_back("beta");
        names__.push_back("beta_super");
        names__.push_back("phi");
        names__.push_back("mub");
        names__.push_back("zeta");
        names__.push_back("mub_sigma");
        names__.push_back("mu");
        names__.push_back("pred_complaints_rep");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "hier_NB_regression_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        double alpha = in__.scalar_constrain();
        vars__.push_back(alpha);

        double beta = in__.scalar_constrain();
        vars__.push_back(beta);

        double beta_super = in__.scalar_constrain();
        vars__.push_back(beta_super);

        double phi = in__.scalar_constrain();
        vars__.push_back(phi);

        Eigen::Matrix<double, Eigen::Dynamic, 1> mub = in__.vector_constrain(J);
        size_t mub_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < mub_j_1_max__; ++j_1__) {
            vars__.push_back(mub(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> zeta = in__.vector_constrain(J);
        size_t zeta_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < zeta_j_1_max__; ++j_1__) {
            vars__.push_back(zeta(j_1__));
        }

        double mub_sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(mub_sigma);

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            // declare and define transformed parameters
            current_statement_begin__ = 40;
            validate_non_negative_index("mu", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> mu(N);
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            stan::math::assign(mu,add(add(stan::model::rvalue(mub, stan::model::cons_list(stan::model::index_multi(building_idx), stan::model::nil_index_list()), "mub"), multiply(beta, traps)), log_sq_foot));

            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // write transformed parameters
            if (include_tparams__) {
                size_t mu_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                    vars__.push_back(mu(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 68;
            validate_non_negative_index("pred_complaints_rep", "N", N);
            std::vector<int> pred_complaints_rep(N, int(0));
            stan::math::fill(pred_complaints_rep, std::numeric_limits<int>::min());

            // generated quantities statements
            current_statement_begin__ = 69;
            for (int n = 1; n <= N; ++n) {

                current_statement_begin__ = 70;
                if (as_bool(logical_gt(get_base1(mu, n, "mu", 1), 20))) {

                    current_statement_begin__ = 71;
                    std::stringstream errmsg_stream__;
                    errmsg_stream__ << "mu out of bounds, rejected...";
                    throw std::domain_error(errmsg_stream__.str());
                }
                current_statement_begin__ = 73;
                stan::model::assign(pred_complaints_rep, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            neg_binomial_2_log_rng(get_base1(mu, n, "mu", 1), phi, base_rng__), 
                            "assigning variable pred_complaints_rep");
            }

            // validate, write generated quantities
            current_statement_begin__ = 68;
            size_t pred_complaints_rep_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < pred_complaints_rep_k_0_max__; ++k_0__) {
                vars__.push_back(pred_complaints_rep[k_0__]);
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    std::string model_name() const {
        return "hier_NB_regression_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_super";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());
        size_t mub_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < mub_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mub" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t zeta_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < zeta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zeta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mub_sigma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t mu_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        size_t pred_complaints_rep_k_0_max__ = N;
        for (size_t k_0__ = 0; k_0__ < pred_complaints_rep_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pred_complaints_rep" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_super";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());
        size_t mub_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < mub_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mub" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t zeta_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < zeta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zeta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mub_sigma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t mu_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        size_t pred_complaints_rep_k_0_max__ = N;
        for (size_t k_0__ = 0; k_0__ < pred_complaints_rep_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pred_complaints_rep" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}  // namespace

typedef hier_NB_regression_model_namespace::hier_NB_regression_model stan_model;

#ifndef USING_R

stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif

